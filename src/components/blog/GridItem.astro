---
import { APP_BLOG } from 'astrowind:config';
import type { Post } from '~/types';
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

import { findImage } from '~/utils/images';
import { getPermalink } from '~/utils/permalinks';

export interface Props {
  post: Post;
}

const { post } = Astro.props;
const imageResult = await findImage(post.image);

// Type guard to check if the image is a remote URL
const isRemoteImage = typeof imageResult === 'string' && 
  (imageResult.startsWith('http://') || imageResult.startsWith('https://'));

// Type guard to check if the image is a local image metadata
const isLocalImage = imageResult && typeof imageResult === 'object' && 'src' in imageResult;

const link = APP_BLOG?.post?.isEnabled ? getPermalink(post.permalink, 'post') : '';
---

<article
  class="mb-6 transition intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
>
  <div class="relative md:h-64 bg-gray-400 dark:bg-slate-700 rounded shadow-lg mb-6">
    {
      link ? (
        <a href={link} class="block w-full h-full">
          {isRemoteImage && (
            <Image
              src={imageResult as string}
              alt={post.title}
              width={900}
              height={506}
              class="w-full h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700 object-cover"
              widths={[400, 900]}
              sizes="(max-width: 900px) 400px, 900px"
              loading="eager"
              decoding="async"
            />
          )}
          {isLocalImage && (
            <Image
              src={imageResult as ImageMetadata}
              alt={post.title}
              width={900}
              height={506}
              class="w-full h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700 object-cover"
              widths={[400, 900]}
              sizes="(max-width: 900px) 400px, 900px"
              loading="eager"
              decoding="async"
            />
          )}
        </a>
      ) : (
        <>
          {isRemoteImage && (
            <Image
              src={imageResult as string}
              alt={post.title}
              width={900}
              height={506}
              class="w-full h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700 object-cover"
              widths={[400, 900]}
              sizes="(max-width: 900px) 400px, 900px"
              loading="eager"
              decoding="async"
            />
          )}
          {isLocalImage && (
            <Image
              src={imageResult as ImageMetadata}
              alt={post.title}
              width={900}
              height={506}
              class="w-full h-full rounded shadow-lg bg-gray-400 dark:bg-slate-700 object-cover"
              widths={[400, 900]}
              sizes="(max-width: 900px) 400px, 900px"
              loading="eager"
              decoding="async"
            />
          )}
        </>
      )
    }
  </div>

  <h3 class="text-xl font-bold leading-tight mb-2 font-heading dark:text-slate-300">
    {
      link ? (
        <a class="inline-block hover:text-primary dark:hover:text-blue-700 transition ease-in duration-200" href={link}>
          {post.title}
        </a>
      ) : (
        post.title
      )
    }
  </h3>

  <p class="text-muted dark:text-slate-400 text-md md:text-sm">{post.excerpt}</p>
</article>
