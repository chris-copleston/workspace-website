---
import type { HTMLAttributes } from 'astro/types';
import { findImage } from '~/utils/images';
import {
  getImagesOptimized,
  astroAsseetsOptimizer,
  unpicOptimizer,
  isUnpicCompatible,
  type ImageProps,
} from '~/utils/images-optimization';

type Props = ImageProps & {
  invertInDarkMode?: boolean;
};

type ImageType = {
  src: string;
  attributes: HTMLAttributes<'img'>;
};

const props = Astro.props;

if (props.alt === undefined || props.alt === null) {
  throw new Error('Alt text is required for images');
}

// Ensure width and height are always numbers
if (typeof props.width === 'string') {
  props.width = parseInt(props.width);
}

if (typeof props.height === 'string') {
  props.height = parseInt(props.height);
}

// If width or height is not provided, try to get from the image
if (!props.width || !props.height) {
  try {
    const imageModule = await import(/* @vite-ignore */ props.src);
    props.width = imageModule.default.width;
    props.height = imageModule.default.height;
  } catch (error) {
    console.warn('Could not automatically determine image dimensions', error);
  }
}

if (!props.loading) {
  props.loading = 'lazy';
}

if (!props.decoding) {
  props.decoding = 'async';
}

const _image = await findImage(props.src);

let image: ImageType | undefined = undefined;

if (
  typeof _image === 'string' &&
  (_image.startsWith('http://') || _image.startsWith('https://')) &&
  isUnpicCompatible(_image)
) {
  image = await getImagesOptimized(_image, props, unpicOptimizer);
} else if (_image) {
  image = await getImagesOptimized(_image, props, astroAsseetsOptimizer);
}
---

{
  !image ? (
    <Fragment />
  ) : (
    <img 
      src={image.src} 
      crossorigin="anonymous" 
      referrerpolicy="no-referrer" 
      class:list={[
        props.class,
        props.invertInDarkMode && 'dark:invert'
      ]}
      {...image.attributes} 
    />
  )
}
