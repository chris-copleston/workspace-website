---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';

import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-50 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
    'max-[929px]:fixed max-[929px]:bg-white max-[929px]:dark:bg-slate-900'
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 md:px-6 mx-auto w-full md:flex md:justify-between',
      {
        'md:flex md:justify-between': position !== 'center',
      },
      {
        'md:grid md:grid-cols-3 md:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between z-50']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center md:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center w-full md:w-auto md:flex md:mx-5 text-default md:justify-self-center"
      aria-label="Main navigation"
    >
      {/* Desktop Menu */}
      <ul class="hidden md:flex md:flex-row md:self-center md:w-auto text-xl md:text-[0.9375rem] tracking-[0.01rem] font-medium md:justify-center">
        {
          links.map(({ text, href, links, icon }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                  >
                    {icon && (
                      <div class="icon-wrapper">
                        <Icon name={icon} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                      </div>
                    )}
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 md:inline" />
                  </button>
                  <ul class="dropdown-menu md:backdrop-blur-md dark:md:bg-dark rounded md:absolute pl-4 md:pl-0 md:hidden font-medium md:bg-white/90 md:min-w-[200px] md:shadow-lg border border-gray-100/20 md:opacity-0">
                    {links.map(({ text: text2, href: href2, icon: icon2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b md:hover:bg-blue-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap flex items-center',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {icon2 && (
                            <div class="icon-wrapper">
                              <Icon name={icon2} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                            </div>
                          )}
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {icon && (
                    <div class="icon-wrapper">
                      <Icon name={icon} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                    </div>
                  )}
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>

      {/* Mobile Menu */}
      <div id="mobile-menu" class="max-[929px]:fixed max-[929px]:inset-0 max-[929px]:top-[72px] bg-white dark:bg-slate-900 z-40 hidden">
        <ul class="flex flex-col w-full text-xl tracking-[0.01rem] font-medium overflow-y-auto h-[calc(100vh-120px)] pb-6">
          {
            links.map(({ text, href, links, icon }) => (
              <li class={links?.length ? 'dropdown' : ''}>
                {links?.length ? (
                  <>
                    <button
                      type="button"
                      class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                    >
                      {icon && (
                        <div class="icon-wrapper">
                          <Icon name={icon} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                        </div>
                      )}
                      {text}
                    </button>
                    <ul class="pl-4 font-medium border border-gray-100/20">
                      {links.map(({ text: text2, href: href2, icon: icon2 }) => (
                        <li>
                          <a
                            class:list={[
                              'hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap flex items-center',
                              { 'aw-link-active': href2 === currentPath },
                            ]}
                            href={href2}
                          >
                            {icon2 && (
                              <div class="icon-wrapper">
                                <Icon name={icon2} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                              </div>
                            )}
                            {text2}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </>
                ) : (
                  <a
                    class:list={[
                      'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap',
                      { 'aw-link-active': href === currentPath },
                    ]}
                    href={href}
                  >
                    {icon && (
                      <div class="icon-wrapper">
                        <Icon name={icon} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                      </div>
                    )}
                    {text}
                  </a>
                )}
              </li>
            ))
          }
        </ul>
      </div>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden md:self-center md:flex items-center md:mb-0 fixed w-full md:w-auto md:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 md:p-0 md:justify-self-end',
        'max-[929px]:fixed max-[929px]:bottom-0 max-[929px]:left-0 max-[929px]:bg-white max-[929px]:dark:bg-slate-900 max-[929px]:border-t max-[929px]:border-gray-200 max-[929px]:dark:border-gray-700 max-[929px]:z-50'
      ]}
    >
      <div class="items-center flex justify-between w-full md:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 md:w-5 md:h-5 md:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-2.5 px-5.5 md:px-6 font-semibold shadow-none text-sm w-auto hover:bg-blue-600 hover:text-white dark:hover:bg-blue-700 dark:hover:text-white" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>

<style>
  @media (max-width: 929px) {
    .dropdown button,
    nav a[href]:not(.dropdown-menu a) {
      width: 100%;
      font-weight: bold;
      border-top: 1px solid rgb(219 234 254);
    }

    :global(.dark) .dropdown button,
    :global(.dark) nav a[href]:not(.dropdown-menu a) {
      border-color: rgb(51 65 85); /* slate-700 */
    }

    /* Fixed header padding */
    :global(body) {
      padding-top: 57px;
    }

    /* Prevent scroll when menu is open */
    :global(body:has(#mobile-menu:not(.hidden))) {
      overflow: hidden !important;
      position: fixed;
      width: 100%;
      height: 100%;
    }

    /* Menu visibility */
    #mobile-menu:not(.hidden) {
      display: block;
    }
  }
  @media (min-width: 930px) {
    .dropdown:hover .dropdown-menu {
      display: block;
      opacity: 1;
    }
  }

  /* Add transitions for menu items */
  nav a,
  .dropdown button,
  .dropdown-menu a {
    transition: color 0.3s ease, background-color 0.3s ease-in-out;
  }

  nav a:hover,
  .dropdown button:hover {
    color: rgb(37, 99, 235); /* blue-600 */
  }

  .dark nav a:hover,
  .dark .dropdown button:hover {
    color: rgb(96, 165, 250); /* blue-400 */
  }

  .icon-wrapper {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transform-origin: center;
  }
</style>

<script>
  document.addEventListener(
    "astro:page-load",
    () => {
      console.log('header');
      initMobileMenu();
      initIconAnimations();
    },
    { once: false }
  );

  const initMobileMenu = () => {
    const nav = document.querySelector('nav');
    const menuButton = document.querySelector('[data-aw-toggle-menu]');
    
    menuButton?.addEventListener('click', () => {
      nav?.querySelector('#mobile-menu')?.classList.toggle('hidden');
    });
  };

  const initIconAnimations = () => {
    // Select all icon elements within menu items
    const menuIcons = document.querySelectorAll('nav a .w-5, nav button .w-5');
    
    // Wrap each icon in a container div
    menuIcons.forEach(icon => {
      const wrapper = document.createElement('div');
      wrapper.className = 'icon-wrapper';
      icon.parentNode?.insertBefore(wrapper, icon);
      wrapper.appendChild(icon);
    });

    // Add hover animations for each icon wrapper
    const iconWrappers = document.querySelectorAll('.icon-wrapper');
    iconWrappers.forEach(wrapper => {
      const parentElement = wrapper.closest('a, button');
      
      parentElement?.addEventListener('mouseenter', () => {
        gsap.to(wrapper, {
          scale: 1.2,
          rotate: -4,
          duration: 0.3,
          ease: 'power2.out'
        });
      });

      parentElement?.addEventListener('mouseleave', () => {
        gsap.to(wrapper, {
          scale: 1,
          rotate: 0,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    });
  };
</script>
