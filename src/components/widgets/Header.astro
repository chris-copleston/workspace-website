---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import Button from '~/components/ui/Button.astro';

import { getHomePermalink } from '~/utils/permalinks';
import { trimSlash, getAsset } from '~/utils/permalinks';

import type { CallToAction } from '~/types';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  showToggleTheme = false,
  showRssFeed = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0"></div>
  <div
    class:list={[
      'relative text-default py-3 px-3 min-[930px]:px-6 mx-auto w-full',
      {
        'min-[930px]:flex min-[930px]:justify-between': position !== 'center',
      },
      {
        'min-[930px]:grid min-[930px]:grid-cols-3 min-[930px]:items-center': position === 'center',
      },
      {
        'max-w-7xl': !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center min-[930px]:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class="items-center w-full min-[930px]:w-auto hidden min-[930px]:flex min-[930px]:mx-5 text-default overflow-y-auto overflow-x-hidden min-[930px]:overflow-y-visible min-[930px]:overflow-x-auto min-[930px]:justify-self-center"
      aria-label="Main navigation"
    >
      <ul
        class="flex flex-col min-[930px]:flex-row min-[930px]:self-center w-full min-[930px]:w-auto text-xl min-[930px]:text-[0.9375rem] tracking-[0.01rem] font-medium min-[930px]:justify-center"
      >
        {
          links.map(({ text, href, links, icon }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                  >
                    {icon && (
                      <div class="icon-wrapper">
                        <Icon name={icon} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                      </div>
                    )}
                    {text}{' '}
                    <Icon name="tabler:chevron-down" class="w-3.5 h-3.5 ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden min-[930px]:inline" />
                  </button>
                  <ul class="dropdown-menu min-[930px]:backdrop-blur-md dark:min-[930px]:bg-dark rounded min-[930px]:absolute pl-4 min-[930px]:pl-0 min-[930px]:hidden font-medium min-[930px]:bg-white/90 min-[930px]:min-w-[200px] min-[930px]:shadow-lg border border-gray-100/20 min-[930px]:opacity-0">
                    {links.map(({ text: text2, href: href2, icon: icon2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b min-[930px]:hover:bg-blue-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap flex items-center',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {icon2 && (
                            <div class="icon-wrapper">
                              <Icon name={icon2} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                            </div>
                          )}
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {icon && (
                    <div class="icon-wrapper">
                      <Icon name={icon} class="w-5 h-5 mr-2 rtl:mr-0 rtl:ml-2 text-blue-600 dark:text-blue-400" />
                    </div>
                  )}
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'hidden min-[930px]:self-center min-[930px]:flex items-center min-[930px]:mb-0 fixed w-full min-[930px]:w-auto min-[930px]:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 min-[930px]:p-0 min-[930px]:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-full min-[930px]:w-auto">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-6 h-6 min-[930px]:w-5 min-[930px]:h-5 min-[930px]:inline-block" />}
          {
            showRssFeed && (
              <a
                class="text-muted dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5 inline-flex items-center"
                aria-label="RSS Feed"
                href={getAsset('/rss.xml')}
              >
                <Icon name="tabler:rss" class="w-5 h-5" />
              </a>
            )
          }
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-2.5 px-5.5 min-[930px]:px-6 font-semibold shadow-none text-sm w-auto hover:bg-blue-600 hover:text-white" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>

<style>
  @media (max-width: 929px) {
    .dropdown button,
    nav a[href]:not(.dropdown-menu a) {
      width: 100%;
      font-weight: bold;
      border-top: 1px solid rgb(219 234 254);
    }
  }
  @media (min-width: 930px) {
    .dropdown:hover .dropdown-menu {
      display: block;
      opacity: 1;
    }
  }

  /* Add transitions for menu items */
  nav a,
  .dropdown button,
  .dropdown-menu a {
    transition: background-color 0.3s ease-in-out;
  }

  .icon-wrapper {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transform-origin: center;
  }
</style>

<script>
  document.addEventListener(
  "astro:page-load",
  () => {
    console.log('header');
    initIconAnimations();
  },
  { once: false }
);

const initIconAnimations = () => {  // Select all icon elements within menu items
  const menuIcons = document.querySelectorAll('nav a .w-5, nav button .w-5');
  
  // Wrap each icon in a container div
  menuIcons.forEach(icon => {
    const wrapper = document.createElement('div');
    wrapper.className = 'icon-wrapper';
    icon.parentNode?.insertBefore(wrapper, icon);
    wrapper.appendChild(icon);
  });

  // Add hover animations for each icon wrapper
  const iconWrappers = document.querySelectorAll('.icon-wrapper');
  iconWrappers.forEach(wrapper => {
    const parentElement = wrapper.closest('a, button');
    
    parentElement?.addEventListener('mouseenter', () => {
      gsap.to(wrapper, {
        scale: 1.2,
        rotate: -4,
        duration: 0.3,
        ease: 'power2.out'
      });
    });

    parentElement?.addEventListener('mouseleave', () => {
      gsap.to(wrapper, {
        scale: 1,
        rotate: 0,
        duration: 0.3,
        ease: 'power2.out'
      });
    });
  });
}
</script>
