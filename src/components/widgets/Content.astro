---
import type { ImageMetadata } from 'astro';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '../ui/ItemGrid.astro';
import Iphone from './Iphone.astro';

export interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  tagline?: string;
  content?: string;
  callToAction?: {
    text: string;
    href: string;
    icon?: string;
    target?: string;
    rel?: string;
  };
  items?: Array<{
    title?: string;
    description?: string;
    icon?: string;
    href?: string;
  }>;
  columns?: number;
  image?: {
    src: string | ImageMetadata;
    alt?: string;
  };
  iphone?: {
    img: string;
    color: string[];
    enableOrbitControls?: boolean;
    enableAutoRotation?: boolean;
    start?: {
      x: number;
      y: number;
      z: number;
    };
    end?: {
      x: number;
      y: number;
      z: number;
    };
    timeline?: {
      scrollTrigger: {
        trigger: string;
        start: string;
        end: string;
        scrub?: number | boolean;
        markers?: boolean;
        resetOnLeave?: boolean;
      };
      keyframes: Array<{
        from?: {
          position?: { x: number; y: number; z: number };
          rotation?: { x: number; y: number; z: number };
        };
        to?: {
          position?: { x: number; y: number; z: number };
          rotation?: { x: number; y: number; z: number };
        };
        position?: { x: number; y: number; z: number };
        rotation?: { x: number; y: number; z: number };
        duration: number;
      }>;
    };
  };
  isReversed?: boolean;
  isAfterContent?: boolean;
  isDark?: boolean;
  classes?: Record<string, string>;
  bg?: string;
}

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render('image'),
  iphone,
  isReversed = false,
  isAfterContent = false,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  {title && (
    <Headline
      title={title}
      subtitle={subtitle}
      tagline={tagline}
      classes={{
        container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
        title: 'text-4xl md:text-5xl font-bold tracking-tighter mb-4 font-heading',
        subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
      }}
    />
  )}
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class={["md:flex", isReversed ? "md:flex-row-reverse" : "", "md:gap-16"].join(" ")}>
      <div class="md:basis-1/2 self-center">
        {content && <div class="mb-12 text-lg dark:text-slate-400" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" href={callToAction.href} target={callToAction.target} rel={callToAction.rel}>
                {callToAction.icon && <i class={callToAction.icon} />}
                {callToAction.text}
              </Button>
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-4 md:gap-y-8`,
            panel: 'max-w-none',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
            description: 'text-muted dark:text-slate-400 ml-2 rtl:ml-0 rtl:mr-2',
            icon: 'flex h-7 w-7 items-center justify-center rounded-full bg-green-600 dark:bg-green-700 text-gray-50 p-1',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
        <div class="relative m-auto max-w-4xl">
          {
            image && (
              <div class="relative">
                {typeof image === 'string' ? (
                  <Fragment set:html={image} />
                ) : (
                  <Image
                    class="mx-auto w-full rounded-lg bg-gray-500 shadow-lg"
                    width={500}
                    height={500}
                    widths={[400, 768]}
                    sizes="(max-width: 768px) 100vw, 432px"
                    layout="responsive"
                    {...image}
                  />
                )}
                {iphone && (
                  <div class="absolute inset-0 w-full h-full">
                    <Iphone 
                      item={{ img: iphone.img, color: iphone.color }}
                      enableOrbitControls={iphone.enableOrbitControls}
                      enableAutoRotation={iphone.enableAutoRotation}
                      start={iphone.start}
                      end={iphone.end}
                      timeline={iphone.timeline}
                    />
                  </div>
                )}
              </div>
            )
          }
        </div>
      </div>
    </div>
  </div>
</WidgetWrapper>
